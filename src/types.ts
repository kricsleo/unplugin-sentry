import type { SentryCliCommitsOptions, SentryCliNewDeployOptions, SentryCliOptions, SentryCliUploadSourceMapsOptions } from '@sentry/cli'

/** options */
export interface Options extends SentryCliOptions {
  /**
   * The URL of the Sentry
   */
  url: string
  /**
   * Orgination name in Sentry
   */
  org: string
  /**
   * Project name in Senrty
   */
  project: string
  /**
   * Auth token
   */
  authToken: string
  /**
   * Release version,
   * auto generated by git commit hash,
   * you can also config it by yourself
   */
  release?: string
  /**
   * If use short commit hash for release version
   * @default true
   */
  shortRelease?: boolean
  /**
   * Sourcemap configs
   */
  sourcemap?: SourcemapOptions
  /**
   * Deploy configs
   */
  deploy?: DeployOptions
  /**
   * If delete local sourcemap after the upload,
   * @default true
   */
  cleanLocal?: boolean
  /**
   * If Remove all the artifacts in the release before the upload.
   * @default true
   */
  cleanArtifacts?: boolean
  /**
   * If finalize a release after the upload
   * @default true
   */
  finalize?: boolean
  /**
   * Path of config file
   */
  configFile?: string
  /**
   * Commits configs
   */
  commits?: SentryCliCommitsOptions
  /**
   * If attempts a dry run
   * @default false
   */
  dryRun?: boolean
}

export interface SourcemapOptions extends Omit<SentryCliUploadSourceMapsOptions, 'include'> {
  /**
   * Sourcemap paths
   * Auto-detect(May failed, then you should provide it yourself)
   */
  include?: SentryCliUploadSourceMapsOptions['include']
  /**
   * !IMPORTANT!: MUST START WITH `~/`
   * Auto-detect(May failed, then you should provide it yourself)
   */
  urlPrefix?: SentryCliUploadSourceMapsOptions['urlPrefix']
}

export interface DeployOptions extends Omit<SentryCliNewDeployOptions, 'env'> {
  /**
   * Environment
   * Auto-detect(Fallback to 'process.env.NODE_ENV', may failed, then you should provide it yourself)
   */
  env?: SentryCliNewDeployOptions['env']
}
